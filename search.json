[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "World Athletics Database as a CSV File",
    "section": "",
    "text": "1 About\nSome 400k athlete performances for various events scraped from World Athletics.\nThe data contains information about a variety of outdoor track and field events, as well as road running and walking events. World Athletics collects performances on the elite level. Results are measured in time or distance units; or points (for e.g. the decathlon). For example, running events have their results measured in hours/minutes/seconds, whereas the long and high jump have their results measured in meters. For some spring and jumping events, there are measurements of the wind reading."
  },
  {
    "objectID": "index.html#get-the-data",
    "href": "index.html#get-the-data",
    "title": "World Athletics Database as a CSV File",
    "section": "1.1 Get the data",
    "text": "1.1 Get the data\nCopy the code below to download the full data set.\nimport pandas as pd\nroot = \"https://raw.githubusercontent.com/thomascamminady/\"\npath = \"world-athletics-database/main/data/data.csv\"\npd.read_csv(root+path, delimiter=\";\", parse_dates=True)\nOr find the source code on Github."
  },
  {
    "objectID": "index.html#development",
    "href": "index.html#development",
    "title": "World Athletics Database as a CSV File",
    "section": "1.2 Development",
    "text": "1.2 Development\nFirst, clone the repository and navigate to the project directory. Then, install the necessary dependencies:\nmake init\nNext, you can parse and post-process the data:\npoetry run python world_athletics_database/parse.py\npoetry run python world_athletics_database/postprocess.py\nNote: Parsing the data may take up to 20 minutes."
  },
  {
    "objectID": "contents/stats.html#some-basic-counts",
    "href": "contents/stats.html#some-basic-counts",
    "title": "2  Getting to know the data",
    "section": "2.1 Some basic counts",
    "text": "2.1 Some basic counts\nBelow are some basic counts of the data.\n\n\nCode\nprint(\"Shape of the dataframe:\")\ndf.shape\n\n\nShape of the dataframe:\n\n\n(463847, 13)\n\n\n\n\nCode\nprint(\"Counts for male and female performance:\")\ndf.groupby(\"Sex\").count()\n\n\nCounts for male and female performance:\n\n\n\nshape: (2, 2)\n\n\n\nSex\ncount\n\n\nstr\nu32\n\n\n\n\n\"male\"\n236187\n\n\n\"female\"\n227660\n\n\n\n\n\n\n\n\nCode\nprint(\"Performance count by sex and event, colored:\")\n(\n    df.groupby(\"Sex\", \"Event\")\n    .count()\n    .pivot(index=\"Event\", columns=\"Sex\", values=\"count\", aggregate_function=None)\n    .sort(\"female\", descending=True)\n    .to_pandas()\n    .style.format(precision=0)\n    .background_gradient(vmax=35_000)\n    # .to_markdown()\n)\n\n\nPerformance count by sex and event, colored:\n\n\n\n\n\n\n\n \nEvent\nfemale\nmale\n\n\n\n\n0\nHammer Throw\n33647\n12984\n\n\n1\n100 Metres\n26983\n24875\n\n\n2\n200 Metres\n22067\n15005\n\n\n3\nPole Vault\n15670\n16388\n\n\n4\n3000 Metres Steeplechase\n15125\n9665\n\n\n5\nJavelin Throw\n13449\n7564\n\n\n6\n800 Metres\n11597\n7283\n\n\n7\n400 Metres\n10867\n8189\n\n\n8\n1500 Metres\n9456\n9107\n\n\n9\n20 Kilometres Race Walk\n9275\n3773\n\n\n10\n100 Metres Hurdles\n7585\nnan\n\n\n11\nShot Put\n7123\n16284\n\n\n12\n400 Metres Hurdles\n6978\n15502\n\n\n13\nTriple Jump\n4724\n5446\n\n\n14\n5000 Metres\n4563\n8357\n\n\n15\nMarathon\n4356\n8496\n\n\n16\n10000 Metres\n3111\n4867\n\n\n17\n3000 Metres\n2924\n2078\n\n\n18\nHigh Jump\n2440\n8980\n\n\n19\nLong Jump\n2343\n6570\n\n\n20\nHalf Marathon\n1955\n5084\n\n\n21\n10 Kilometres Race Walk\n1926\n360\n\n\n22\nDiscus Throw\n1774\n13709\n\n\n23\nHeptathlon\n1124\nnan\n\n\n24\n2000 Metres Steeplechase\n831\n105\n\n\n25\n35 Kilometres Race Walk\n699\n225\n\n\n26\n5 Kilometres Race Walk\n691\n49\n\n\n27\n10 Kilometres\n640\n1129\n\n\n28\nOne Mile\n601\n1753\n\n\n29\n5 Kilometres\n587\n1196\n\n\n30\n1000 Metres\n516\n513\n\n\n31\n50 Kilometres Race Walk\n341\n1477\n\n\n32\n5000 Metres Race Walk\n303\n663\n\n\n33\n15 Kilometres\n198\n189\n\n\n34\n10000 Metres Race Walk\n191\n496\n\n\n35\n10 Miles Road\n163\n143\n\n\n36\n600 Metres\n159\n35\n\n\n37\n20000 Metres Race Walk\n159\n44\n\n\n38\n300 Metres\n151\n843\n\n\n39\n3000 Metres Race Walk\n102\n237\n\n\n40\n20 Kilometres\n95\n283\n\n\n41\nTwo Miles\n92\n146\n\n\n42\n2000 Metres\n79\n223\n\n\n43\nDecathlon\nnan\n1790\n\n\n44\n110 Metres Hurdles\nnan\n13970\n\n\n45\n30 Kilometres Race Walk\nnan\n112\n\n\n\n\n\n\n\nCode\nimport altair as alt\nfrom camminapy.plot import altair_theme\n\nprint(\"Count of performances grouped by year (starting 1960):\")\n\naltair_theme()\nalt.Chart(\n    df.with_columns(pl.col(\"Date\").dt.year())\n    .groupby(\"Date\", \"Sex\")\n    .count()\n    .filter(pl.col(\"Date\") &gt; 1960)\n    .sort(\"Date\")\n    .to_pandas()\n).mark_bar(clip=True).encode(\n    x=alt.X(\"Date:N\").axis(labelAngle=-90, values=list(range(1960, 2024, 2))),\n    y=\"count:Q\",\n    color=alt.Color(\"Sex:N\").scale(\n        domain=[\"female\", \"male\"], range=[\"purple\", \"green\"]\n    ),\n).properties(\n    height=300, width=550\n)\n\n\nCount of performances grouped by year (starting 1960):\n\n\n\n\n\n\n\n\nInteresting to see COVID pop up in this data as well.\n\n\nCode\nprint(\"The top 10 events with the most performances:\")\n(\n    df.groupby(\"Event\")\n    .count()\n    .sort(\"count\", descending=True)\n    .head(10)\n    .to_pandas()\n    .style.background_gradient(subset=\"count\")\n)\n\n\nThe top 10 events with the most performances:\n\n\n\n\n\n\n\n \nEvent\ncount\n\n\n\n\n0\n100 Metres\n51858\n\n\n1\nHammer Throw\n46631\n\n\n2\n200 Metres\n37072\n\n\n3\nPole Vault\n32058\n\n\n4\n3000 Metres Steeplechase\n24790\n\n\n5\nShot Put\n23407\n\n\n6\n400 Metres Hurdles\n22480\n\n\n7\nJavelin Throw\n21013\n\n\n8\n400 Metres\n19056\n\n\n9\n800 Metres\n18880\n\n\n\n\n\n\n\nCode\nprint(\n    \"Let's finish with an overview that shows during which months, which events are held:\"\n)\nalt.Chart(\n    df.with_columns(pl.col(\"Date\").dt.month())\n    .groupby(\"Date\", \"Sex\", \"Event\")\n    .count()\n    .filter(pl.col(\"Event\").str.contains(\"Walk\").is_not())\n    .sort(\"Date\")\n    .to_pandas()\n).mark_bar(clip=True).encode(\n    x=alt.X(\"Date:N\").title(\"Month of Year\"),\n    y=\"count:Q\",\n    color=alt.Color(\"Sex:N\").scale(\n        domain=[\"female\", \"male\"], range=[\"purple\", \"green\"]\n    ),\n    row=\"Event:N\",\n).properties(\n    height=200, width=550\n).resolve_scale(\n    y=\"independent\"\n)\n\n\nLet's finish with an overview that shows during which months, which events are held:"
  },
  {
    "objectID": "contents/analytics.html",
    "href": "contents/analytics.html",
    "title": "3  A deeper dive — looking at the Marathon",
    "section": "",
    "text": "Let’s play around with the data a little bit. We will load the data and look at the top 10 marathon performances of all times.\n\n\nCode\nimport polars as pl\nimport altair as alt\nfrom camminapy.plot import altair_theme\n\n\naltair_theme()\ndf = (\n    pl.read_csv(\"../data/data.csv\", separator=\";\")\n    .filter(pl.col(\"Event\") == \"Marathon\")\n    .groupby(\"Sex\")\n    .head(10)\n    .with_columns(Hours=pl.col(\"Mark [meters or seconds]\") / 3600)\n)\n\nchart = (\n    alt.Chart(\n        df.with_columns(\n            pl.col(\"Competitor\").str.split(\" \").list.last().alias(\"Last Name\")\n        )\n    )\n    .mark_line(point=True)\n    .encode(\n        x=\"Rank:N\",\n        y=alt.Y(\"Hours:Q\").scale(zero=False),\n        color=alt.Color(\"Sex:N\")\n        .scale(domain=[\"female\", \"male\"], range=[\"purple\", \"orange\"])\n        .title(None)\n        .legend(None),\n        tooltip=[f\"{c}:N\" for c in df.columns],\n    )\n    .properties(width=550, height=300)\n    # .interactive()\n)\nalt.layer(\n    chart, chart.mark_text(dy=-10, dx=10, angle=320).encode(text=\"Last Name:N\")\n).facet(row=\"Sex:N\").resolve_scale(y=\"independent\")\n\n\n\n\n\n\n\n\nWe can also look at how world records have progressed over time.\n\n\nCode\nwr = (\n    pl.read_csv(\"../data/data.csv\", separator=\";\", try_parse_dates=True)\n    .sort(\"Sex\", \"Event\", \"Date\")\n    .with_columns((pl.col(\"Mark [meters or seconds]\") / 3600).alias(\"Hours\"))\n    .with_columns(\n        (pl.col(\"Hours\") == pl.col(\"Hours\").cummin())\n        .over(\"Sex\", \"Event\")\n        .alias(\"Performance has been a WR\")\n    )\n    .filter(pl.col(\"Performance has been a WR\"))\n    .filter(pl.col(\"Event\") == \"Marathon\")\n    .with_columns(pl.col(\"Competitor\").str.split(\" \").list.last().alias(\"Last Name\"))\n    .sort(\"Sex\", \"Hours\")\n)\n\n\nchart = (\n    alt.Chart(wr.to_pandas())\n    .mark_line(point=True, interpolate=\"step-after\")\n    .encode(\n        x=\"Date:T\",\n        y=alt.Y(\"Hours:Q\").scale(zero=False),\n        color=alt.Color(\"Sex:N\")\n        .scale(domain=[\"female\", \"male\"], range=[\"purple\", \"orange\"])\n        .title(None)\n        .legend(None),\n        tooltip=[f\"{c}:N\" for c in df.columns],\n    )\n    .properties(width=550, height=300)\n    # .interactive()\n)\nalt.layer(\n    chart, chart.mark_text(dy=-10, dx=10, angle=320).encode(text=\"Last Name:N\")\n).facet(row=\"Sex:N\").resolve_scale(y=\"independent\")"
  },
  {
    "objectID": "contents/about_me.html",
    "href": "contents/about_me.html",
    "title": "4  Hello, it’s me!",
    "section": "",
    "text": "Hey! It’s me, Thomas. I scraped this data from World Athletics.\nI have a couple of other data sets that you can check out.\nIf you like what I do, check out my website. Cheers!"
  }
]